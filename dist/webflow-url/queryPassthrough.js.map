{
  "version": 3,
  "sources": ["../../src/webflow-core/debug.ts", "../../src/webflow-url/queryPassthrough.ts"],
  "sourcesContent": ["\n/*\n * webflow-core\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Debug Utilities\n */\n\nimport { VERSION } from \"../version\";\n\n\n\nexport class Sa5Debug {\n    \n    private localStorageDebugFlag: string = 'sa5-debug';\n\n    private _enabled: boolean = false;\n    private _label: string;\n\n    // Get or set WFU persistent debug state\n    // which is stored in localStorage. \n    get persistentDebug(): boolean {\n        return Boolean(localStorage.getItem(this.localStorageDebugFlag)); \n    }\n    set persistentDebug(active: boolean) {\n        if (active) {\n            localStorage.setItem(this.localStorageDebugFlag, \"true\");\n            console.debug (`sa5-core debug enabled (persistent).`);\n        } else {\n            localStorage.removeItem(this.localStorageDebugFlag); \n            console.debug (`sa5-core debug disabled (persistent).`);\n        }\n    }\n\n    // Enable/disable debugging \n    get enabled(): boolean {\n\n        // localStorage is checked for a debug flag, to enable remote debug enabling \n        // Any non-null string value will resolve to TRUE here, including the string \"false\" \n        var wfuDebugValue = Boolean(localStorage.getItem(this.localStorageDebugFlag)); \n\n        // Or this with the current debug state\n        // If either is enabled, debugging is on \n        wfuDebugValue = wfuDebugValue || this._enabled; \n\n        return wfuDebugValue;\n    }\n    set enabled(active: boolean) {\n        this._enabled = active;\n    }\n\n\n    // Initialize\n    constructor(label: string) {\n\n        // Save the label, for console logging\n        this._label = label;\n\n    }\n\n\n    // Start a console log group\n    group(name) {\n        if (this.enabled)\n            console.group(name);\n    }\n\n    // End a console log group\n    groupEnd() {\n        if (this.enabled)\n            console.groupEnd();\n    }\n\n    // Log debug data to the console\n    debug(...args: any[]): void {\n\n        if (this.enabled)\n            // Unlimited arguments in a JavaScript function\n            // https://stackoverflow.com/a/6396066\n            console.debug(this._label, ...args); \n            \n    }\n\n    /**\n     * Returns the HTML style string\n     * @param elem The element to return the string for \n     * @returns \n     */\n    static getStyleString(elem: HTMLElement): string {\n\n        let styleString = '';\n    \n        for (let i = 0; i < elem.style.length; i++) {\n            const property = elem.style[i];\n            const value = elem.style.getPropertyValue(property);\n            styleString += `${property}: ${value}; `;\n        }\n    \n        return styleString; \n    }\n\n}\n\n\n", "\n/*\n * SA5 Url | Query Passthrough\n * Carries querystring info to other pages\n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n * Url Utilities\n */\n\nimport { Sa5Core } from '../webflow-core'\nimport { Sa5Debug } from '../webflow-core/debug';\n\n// CONFIG:\n// Ignore certain links?\n\nexport interface QueryPassthroughConfig {\n    ignorePatterns: (string | RegExp)[];\n    // Overwrite existing params?\n    overwriteExisting: boolean;\n    internalOnly: boolean; // Only affect internal links\n}\n\nexport class Sa5QueryPassthrough {\n\n    debug: Sa5Debug;\n\n    config: QueryPassthroughConfig; // Optional config\n\n    constructor(config: Partial<QueryPassthroughConfig> = {}) {\n\n\n        this.config = {\n            // Other params to ignore? user accounts login, redir params, etc.\n            // https://www.brojo.org/pub?b42d817d_page=2\n            ignorePatterns: config.ignorePatterns ?? [\n                /_page$/, // Ignore pagination params\n            ],\n            overwriteExisting: config.overwriteExisting ?? false,\n            internalOnly: config.internalOnly ?? true,\n        }\n\n        // Initialize debugging\n        // this.debug = new Sa5Debug(\"sa5-url\");\n        // this.debug.debug (\"Initializing\");\n\n        this.debug = new Sa5Debug(\"sa5-url-querypassthrough\");\n        this.debug.debug (\"Initializing\");\n\n        this.debug.debug (\"Config:\", this.config);\n\n    }\n\n    // Process elements with the custom attr wfu-query-param\n    init() {\n\n        document.addEventListener('click', (event: MouseEvent) => {\n            const target = event.target as HTMLElement;\n            const anchor = target.closest('a');\n\n            if (anchor) {\n\n//                console.log(\"link clicked\"); \n                \n                event.preventDefault();\n\n                const currentPageParams = new URLSearchParams(window.location.search);\n\n                // Get the parameters of the anchor URL\n                const anchorParams = new URLSearchParams(anchor.search);\n\n                // Parse the URL and query string\n                const anchorUrl = new URL(anchor.href);\n\n                // console.log(\"old url\", url.toString())\n                // const params = new URLSearchParams(url.search);\n\n                // Check if the URL is relative or if the hostname matches the current hostname\n                if(this.config.internalOnly) {\n\n                    const isRelativeOrSameHost = !anchorUrl.host || anchorUrl.host === window.location.host;\n\n                    if(!isRelativeOrSameHost) {\n//                        console.log(\"Not internal, skipping\");\n                        return;\n                    }\n                }\n\n                event.preventDefault();\n\n                // Object to hold the new parameters\n//                let newParams: { [key: string]: string } = {};\n\n                let newParams: URLSearchParams = new URLSearchParams();\n\n                /**\n                 * Identify the query param keys we want to preserve\n                 */\n\n                // Iterate over existing parameters\n//                params.forEach((value, key) => {\n                for (const [key, value] of currentPageParams) {\n\n                    // if (!this.shouldIgnoreKey(key) && !anchorParams.has(key)) {\n                    //     anchorParams.append(key, value);\n\n//                    console.log(key, value); \n\n                    if (this.shouldIgnoreKey(key))\n                        continue; \n\n                    if (anchorParams.has(key) && !this.config.overwriteExisting)\n                        continue; \n\n//                    anchorParams[key] = value;\n                        \n                    // && !anchorParams.has(key)) {\n                    //     anchorParams.append(key, value);\n                    // }\n\n                    // // Ignore parameters ending in \"_page\" (pagination)\n                    // if (!key.endsWith('_page')) \n                    //     continue;\n\n                    // Ignore redir Webflow params (user accounts)\n                    // TODO: \n//                    console.log(\"adding\", key, value);\n                    // Add this one\n//                    newParams[key] = value;\n                    newParams.set(key, value);\n\n//                    console.log(newParams)\n                }\n\n                // Add or override other parameters as needed\n                // Example: newParams['newParam'] = 'newValue';\n\n                // Clear existing parameters and set the new ones\n//                Array.from(params.keys()).forEach(key => params.delete(key));\n                // params.forEach((_, key) => params.delete(key));\n                // // Object.entries(newParams).forEach(([key, value]) => {\n                // //     params.set(key, value);\n                // // });\n                // for (let key in newParams) {\n                //     if (newParams.hasOwnProperty(key)) {\n                //         params.set(key, newParams[key]);\n                //     }\n                // }\n\n\n//                console.log(\"writing\", newParams)\n\n\n                // Construct the new URL with the modified query string\n                let newUrl = anchorUrl.origin + anchorUrl.pathname;\n\n                if(newParams.size > 0)\n                    newUrl +=  '?' + newParams.toString();\n\n                // Navigate to the new URL\n//                console.log('Navigating to:', newUrl);\n                window.location.href = newUrl;\n            }\n\n        });\n\n    }\n\n    shouldIgnoreKey(key: string): boolean {\n\n//        console.log(\"checking\", key, this.config.ignorePatterns)\n\n        for (const pattern of this.config.ignorePatterns) {\n            if (typeof pattern === 'string') {\n                if (pattern === key) {\n//                    console.log(\"ignoring\", key);\n                    return true;\n                }\n            } else if (pattern instanceof RegExp) {\n                if (pattern.test(key)) {\n//                    console.log(\"ignoring\", key);\n                    return true;\n                }\n            }\n        }\n\n//        console.log(\"not ignoring\", key);\n        return false;\n    }\n\n}\n"],
  "mappings": "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",
  "names": []
}
