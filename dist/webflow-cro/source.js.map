{
  "version": 3,
  "sources": ["../../src/webflow-cro/source.ts"],
  "sourcesContent": ["\n\n/*\n * webflow-cro\n * Source \n * \n * Sygnal Technology Group\n * http://sygnal.com\n * \n */\n\n\nimport { Sa5Core } from '../webflow-core';\nimport { Sa5Debug } from '../webflow-core/debug';\n\ninterface UTMData {\n\n    transactionId?: string;\n    referrerCode?: string;\n\n    utm_source?: string;\n    utm_medium?: string;\n    utm_campaign?: string;\n    utm_term?: string;\n    utm_content?: string;\n    [key: string]: any; // Allows adding other dynamic properties\n\n    explicit?: boolean; \n} \n\ntype StorageType = 'session' | 'local';\n\nexport class Sa5Source {\n\n    private storageKey = 'sa5_utm_data';\n    public data: UTMData;\n    private storage: Storage; \n\n    constructor(storageType: StorageType = 'session') {\n        // Set the storage type based on the parameter\n        this.storage = storageType === 'local' ? localStorage : sessionStorage;\n        this.data = this.load() || {};\n    }\n\n    /**\n     * Initialize the class.\n     */\n    init() {\n        // Initialization logic if needed\n    }\n\n    /**\n     * Set or update a UTM parameter value.\n     * @param key The UTM parameter name.\n     * @param value The UTM parameter value.\n     */\n    setUTMParam(key: string, value: string): void {\n        this.data[key] = value;\n        this.save();\n    }\n\n    /**\n     * Get a UTM parameter value.\n     * @param key The UTM parameter name.\n     * @returns The value of the UTM parameter, or undefined if not set.\n     */\n    getUTMParam(key: string): string | undefined {\n        return this.data[key];\n    }\n    \n\n    /**\n     * Save the UTM data to the selected storage (sessionStorage or localStorage).\n     */\n    save(): void {\n        this.storage.setItem(this.storageKey, JSON.stringify(this.data));\n    }\n\n    /**\n     * Load the UTM data from the selected storage.\n     * @returns The UTM data object or an empty object if none exists.\n     */\n    load(): UTMData {\n        const storedData = this.storage.getItem(this.storageKey);\n        return storedData ? JSON.parse(storedData) : {};\n    }\n\n    /**\n     * Check if the UTM data exists in storage.\n     * @returns True if the UTM data exists, false otherwise.\n     */\n    exists(): boolean {\n        return this.storage.getItem(this.storageKey) !== null;\n    }\n\n    /**\n     * Clear all UTM data from the selected storage.\n     */\n    clear(): void {\n        this.storage.removeItem(this.storageKey);\n        this.data = {};\n    }\n\n}\n\n\n"],
  "mappings": ";;AAgCO,MAAM,YAAN,MAAgB;AAAA,IAMnB,YAAY,cAA2B,WAAW;AAJlD,WAAQ,aAAa;AAMjB,WAAK,UAAU,gBAAgB,UAAU,eAAe;AACxD,WAAK,OAAO,KAAK,KAAK,KAAK,CAAC;AAAA,IAChC;AAAA,IAKA,OAAO;AAAA,IAEP;AAAA,IAOA,YAAY,KAAa,OAAqB;AAC1C,WAAK,KAAK,OAAO;AACjB,WAAK,KAAK;AAAA,IACd;AAAA,IAOA,YAAY,KAAiC;AACzC,aAAO,KAAK,KAAK;AAAA,IACrB;AAAA,IAMA,OAAa;AACT,WAAK,QAAQ,QAAQ,KAAK,YAAY,KAAK,UAAU,KAAK,IAAI,CAAC;AAAA,IACnE;AAAA,IAMA,OAAgB;AACZ,YAAM,aAAa,KAAK,QAAQ,QAAQ,KAAK,UAAU;AACvD,aAAO,aAAa,KAAK,MAAM,UAAU,IAAI,CAAC;AAAA,IAClD;AAAA,IAMA,SAAkB;AACd,aAAO,KAAK,QAAQ,QAAQ,KAAK,UAAU,MAAM;AAAA,IACrD;AAAA,IAKA,QAAc;AACV,WAAK,QAAQ,WAAW,KAAK,UAAU;AACvC,WAAK,OAAO,CAAC;AAAA,IACjB;AAAA,EAEJ;",
  "names": []
}
