{
  "version": 3,
  "sources": ["../../src/webflow-membership/access-groups.ts"],
  "sourcesContent": ["\n/*\n * SA5 \n * webflow-membership\n * Access Groups\n * \n * Sygnal Technology Group\n * https://www.sygnal.com\n * \n * Member Information Utilities\n */\n\n// import { XXH64 } from '../webflow-crypto';\n// import { toTitleCase, getCookie } from '../utils';\n//import { WfuDebug } from './webflow-core.js';\n\nimport { Sa5Core } from '../webflow-core';\nimport { Sa5Debug } from '../webflow-core/debug';\nimport { Sa5UserAccounts } from '../webflow-membership';\nimport { Sa5User } from './user';\n\n    \n\n\n/*\n * Access Groups class.\n */\n\n//import Md5 from \"crypto-api/src/hasher/md5\"; \nexport class Sa5UserAccessGroups {\n\n    membership: Sa5UserAccounts;\n    accessGroups: string[] = [];\n\n    constructor(membership: Sa5UserAccounts) {\n        this.membership = membership; \n    }\n\n    async initAsync() { \n\nconsole.log(\"initAsync\"); \n\n        // Determine access group access\n        console.log(await this.getAccessGroupsAsync());\n  \n        // Iterate and check\n\n        // this.hasAccessGroup(\"webflow\");\n        // this.hasAccessGroup(\"client\");\n    }\n\n    async getAccessGroupsAsync() {\n\n        this.accessGroups = []; // Object.create(null); \n        // this.accessGroups.push({ key: \"webflow\", access: false });\n        // this.accessGroups.push({ key: \"webflow-2\", access: false });\n        // this.accessGroups.push({ key: \"client\", access: false });\n\n        for (let group of this.membership.config.accessGroups) {\n            let hasAccess: boolean = await this.checkAccessGroupAsync(group);\n            if(hasAccess)\n                this.accessGroups.push(group);\n        }\n\n      //  accessGroups.webflow = false;\n      //  accessGroups[\"webflow-2\"] = false;\n      //  accessGroups.push({\"client\": false});\n      //  accessGroups = {...accessGroups, [\"client\"]: false}; \n      \n    //   this.accessGroups.forEach((element, index) => {\n    //     this.accessGroups[index].access = true;\n    //     });\n        \n        /*\n      const accessGroups = {\n          \"webflow\": false,\n          \"webflow-2\": false,\n          \"client\": false\n        };\n      */\n        \n      //  const ag = accessGroups.map(\n      //x => Object.assign({}, accessGroups, {\"hasAccess\": \"true\"})\n      //  ); \n        \n        return this.accessGroups; // \n      }\n\n    async checkAccessGroupAsync(accessGroupCode): Promise<boolean> {\n\n        const response = await fetch(\n            `${this.membership.config.accessGroupsFolder}/${accessGroupCode}`\n            );\n        console.log(`redirected: ${response.redirected}`);\n      \n        console.log('STATUS:', response.status); \n        \n\n          // https://www.sygnal.com/access-group/webflow\n        // 302\n        // 200 \n        \n          if(!response.redirected)\n          {\n            //no redirection\n            console.log(`Has access group ${accessGroupCode}`);\n            return true; \n          }\n\n          // Check and report mis-configuration \n          if(response.status != 200) {\n            console.warn('SA5', `Memberships configuration error- access group ${accessGroupCode} is not queryable.`);\n          }\n\n\n        //   else\n        //   {\n            //redirection\n            console.log(`Not logged in, or no access to ${accessGroupCode}`); \n\n\n\n            return false; \n//          }\n      \n        // /log-in?\n          // https://www.sygnal.com/access-group/client\n        // access denied\n        // 302 \n        // /access-denied? \n        \n\n    }\n\n}\n\n"],
  "mappings": ";;AA6BO,MAAM,sBAAN,MAA0B;AAAA,IAK7B,YAAY,YAA6B;AAFzC,0BAAyB,CAAC;AAGtB,WAAK,aAAa;AAAA,IACtB;AAAA,IAEA,MAAM,YAAY;AAEtB,cAAQ,IAAI,WAAW;AAGf,cAAQ,IAAI,MAAM,KAAK,qBAAqB,CAAC;AAAA,IAMjD;AAAA,IAEA,MAAM,uBAAuB;AAEzB,WAAK,eAAe,CAAC;AAKrB,eAAS,SAAS,KAAK,WAAW,OAAO,cAAc;AACnD,YAAI,YAAqB,MAAM,KAAK,sBAAsB,KAAK;AAC/D,YAAG;AACC,eAAK,aAAa,KAAK,KAAK;AAAA,MACpC;AAuBA,aAAO,KAAK;AAAA,IACd;AAAA,IAEF,MAAM,sBAAsB,iBAAmC;AAE3D,YAAM,WAAW,MAAM;AAAA,QACnB,GAAG,KAAK,WAAW,OAAO,sBAAsB;AAAA,MAChD;AACJ,cAAQ,IAAI,eAAe,SAAS,YAAY;AAEhD,cAAQ,IAAI,WAAW,SAAS,MAAM;AAOpC,UAAG,CAAC,SAAS,YACb;AAEE,gBAAQ,IAAI,oBAAoB,iBAAiB;AACjD,eAAO;AAAA,MACT;AAGA,UAAG,SAAS,UAAU,KAAK;AACzB,gBAAQ,KAAK,OAAO,iDAAiD,mCAAmC;AAAA,MAC1G;AAME,cAAQ,IAAI,kCAAkC,iBAAiB;AAI/D,aAAO;AAAA,IAUf;AAAA,EAEJ;",
  "names": []
}
