{
  "version": 3,
  "sources": ["../../../src/webflow-detect/geo-handlers/geo-handler-base.ts", "../../../src/webflow-detect/geo-handlers/ip-info.ts"],
  "sourcesContent": ["\n\nexport type GeoHandlerInfo = {\n    ip: string;\n    country: string;\n    city: string;\n\n    //latitude\n    //longitude\n\n    region: string;\n    postal: string;\n    timezone: string;\n\n}\n\nexport abstract class GeoHandlerBase {\n\n    userInfoRaw: any;\n\n    token: string;\n\n    constructor(token: string = null) {\n        this.token = token;\n    }\n\n    get info(): GeoHandlerInfo {\n        return {\n            ip: this.userInfoRaw.ip,\n            country: this.userInfoRaw.countryCode,\n            city: null,\n            region: null,\n            postal: null,\n            timezone: null,\n        }\n    }\n\n    // Retrieve user info from a service\n    // then normalize it\n    async getInfoAsync(): Promise<any> {\n        \n    };\n\n}", "\n        // https://ipinfo.io/developers\n\nimport { GeoHandlerBase, GeoHandlerInfo } from \"./geo-handler-base\";\n\n//        const ipinfoWrapper = new IPinfoWrapper(IP_INFO_TOKEN);\n\n        // ipinfoWrapper.lookupIp(null).then((response: IPinfo) => {\n        //     console.log(response);\n        // });\n\n        // ipinfoWrapper.lookupIp(\"1.1.1.1\").then((response: IPinfo) => {\n        //     console.log(response);\n        // });\n        \n        // ipinfoWrapper.lookupASN(\"AS7922\").then((response: AsnResponse) => {\n        //     console.log(response);\n        // });\n\n//const IP_INFO_TOKEN = '37cce46c605631';\n\nexport class IPInfo extends GeoHandlerBase {\n\n\n\n    get info(): GeoHandlerInfo {\n        return {\n            ip: this.userInfoRaw.ip,\n            country: this.userInfoRaw.countryCode,\n            city: null,\n            region: null,\n            postal: null,\n            timezone: null,\n        }\n    }\n\n\n    constructor(token: string = null) {\n        super(token);\n    }\n\n    async getInfoAsync(): Promise<any> {\n\n        const request = await fetch(`https://ipinfo.io/json?token=${this.token}`); \n        this.userInfoRaw = await request.json()\n        \n\n\n        console.log(\n            this.userInfoRaw \n            ); \n\n        return this.userInfoRaw; \n\n    }\n\n}"],
  "mappings": ";;AAgBO,MAAe,iBAAf,MAA8B;AAAA,IAMjC,YAAY,QAAgB,MAAM;AAC9B,WAAK,QAAQ;AAAA,IACjB;AAAA,IAEA,IAAI,OAAuB;AACvB,aAAO;AAAA,QACH,IAAI,KAAK,YAAY;AAAA,QACrB,SAAS,KAAK,YAAY;AAAA,QAC1B,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU;AAAA,MACd;AAAA,IACJ;AAAA,IAIA,MAAM,eAA6B;AAAA,IAEnC;AAAA,EAEJ;;;ACtBO,MAAM,SAAN,cAAqB,eAAe;AAAA,IAIvC,IAAI,OAAuB;AACvB,aAAO;AAAA,QACH,IAAI,KAAK,YAAY;AAAA,QACrB,SAAS,KAAK,YAAY;AAAA,QAC1B,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,UAAU;AAAA,MACd;AAAA,IACJ;AAAA,IAGA,YAAY,QAAgB,MAAM;AAC9B,YAAM,KAAK;AAAA,IACf;AAAA,IAEA,MAAM,eAA6B;AAE/B,YAAM,UAAU,MAAM,MAAM,gCAAgC,KAAK,OAAO;AACxE,WAAK,cAAc,MAAM,QAAQ,KAAK;AAItC,cAAQ;AAAA,QACJ,KAAK;AAAA,MACL;AAEJ,aAAO,KAAK;AAAA,IAEhB;AAAA,EAEJ;",
  "names": []
}
