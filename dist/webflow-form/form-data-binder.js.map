{
  "version": 3,
  "sources": ["../../src/webflow-form/form-data-binder.ts"],
  "sourcesContent": ["\n/*\n * form-data-binder\n * \n * Sygnal Technology Group\n * https://www.sygnal.com\n * \n * For capturing sender IP info,\n * and appending to a form.\n */\n\nimport { Sa5Form } from \"../webflow-form\";\n// import { getDataSource } from './webflow-data-collectionlist.js';\n\nexport class Sa5FormDataBinder {\n\n    config; // Optional config\n\n    handler;\n\n    form: Sa5Form;\n//    prefix = \"ip\";\n\n    constructor(form: Sa5Form, config) {\n        \n        this.form = form;\n        \n        this.handler = this;\n\n        this.config = config;\n\n    }\n/* \n    // Creates an HTML <DATALIST> for binding.\n    // Data source assumes array of objects, with a per-item value of 'name'\n    createHtmlDataList(dataSourceName, data) {\n\n        var datalist = document.createElement('datalist');\n        datalist.setAttribute(\"id\", dataSourceName);\n\n    //    console.log(elemType);\n\n        console.log(`creating dataList '${dataSourceName}'`);\n        console.log(data);\n\n    //    console.log(JSON.stringify(data, 2));\n\n        $.each(data, function (key, entry) {\n            console.log(`iterate`);\n\n            // create new option element\n            var opt = document.createElement('option');\n\n            // create text node to add to option element (opt)\n            console.log(entry.text);\n\n            // HTML Decode JSON for Select Option element\n            var decodedText = $(\"<textarea/>\").html(entry.text).val();\n            //                console.log(decodedText);\n\n            opt.setAttribute(\"value\", decodedText);\n\n            //                opt.appendChild(document.createTextNode(decodedText));\n\n            // set value property of opt\n            //                opt.value = entry.id;\n\n            // add opt to end of select box (sel)\n            datalist.appendChild(opt);\n\n        });\n\n        console.log(datalist);\n\n        document.body.appendChild(datalist);\n\n    }\n\n    // Creates a more unique version of a DataSource name (DSN)\n    // to ensure it won't conflict with element IDs\n    createDsnMoniker(dsn) {\n        return `wfu-dsn__${dsn}`;\n    }\n\n    // Bind all INPUTS with [wfu-bind] specified\n    dataBindAllFormInputs(db) {\n\n        // Find all INPUTS with [wfu-bind] specified\n        var dataBoundElements = $('input[wfu-bind]');\n\n        // Iterate and bind each individually\n        $.each(dataBoundElements, function (i, elem) {\n            dataBindFormInput(elem, db);\n        })\n\n    }\n\n    // Bind all SELECTS with [wfu-bind] specified\n    dataBindAllFormSelects(db) {\n\n        // Find all SELECTS with [wfu-bind] specified\n        var dataBoundElements = $('select[wfu-bind]');\n\n        // Iterate and bind each individually\n        $.each(dataBoundElements, function (i, elem) {\n            dataBindFormSelect(elem, db);\n        })\n\n    }\n\n    // Note, db not really needed for INPUT binding,\n    // since they are bound to the DATALIST elements already created.\n    // However kept in the call for pattern consistency\n    dataBindFormInput(elem, db) {\n\n        // Validate element type\n        if (!(elem instanceof HTMLInputElement)) {\n            console.error(`Attempted to INPUT databind a non-INPUT element.`);\n            return;\n        }\n\n        // Get the data-source name\n        var dataSourceName = elem.getAttribute('wfu-bind');\n        console.log(`wfu-bind = ${dataSourceName}`);\n\n        // Handle missing source specification\n        if (!dataSourceName) {\n            console.warn('dataBound element found with no datasource specified.');\n            return;\n        }\n\n        // Add HTML attribute that connects the INPUT\n        // to the DATALIST\n        elem.setAttribute(\n            \"list\",\n            createDsnMoniker(dataSourceName)\n        );\n\n    }\n\n    dataBindFormSelect(elem, db) {\n\n        // Validate element type\n        if (!(elem instanceof HTMLSelectElement)) {\n            console.error(`Attempted to SELECT databind a non-SELECT element.`);\n            return;\n        }\n\n        // Get the data-source name\n        var dataSourceName = elem.getAttribute('wfu-bind');\n\n        // Handle missing source specification\n        if (!dataSourceName) {\n            console.warn('dataBound element found with no datasource specified.');\n            return;\n        }\n\n        // Do data binding\n        $.each((db.data.get(dataSourceName)), function (key, entry) {\n\n            // create new option element\n            var opt = document.createElement('option');\n\n            // create text node to add to option element (opt)\n            // HTML Decode JSON for Select Option element\n            var decodedText = $(\"<textarea/>\").html(entry.text).val(); // HTML Decode text\n            opt.appendChild(document.createTextNode(decodedText));\n\n            // set value property of opt\n            opt.value = entry.id;\n\n            // add opt to end of select box (sel)\n            elem.appendChild(opt);\n\n        });\n\n    }\n\n\n    appendIPInfo() {\n\n        const handler = this.handler;\n        const form = this.form;\n\n        console.debug(\"WFU append IP Info to form.\");\n\n        // Get GeoIP info\n        // and append in hidden fields \n        $.getJSON(\n            \"https://get.geojs.io/v1/ip/geo.json\",\n            function (data) {\n\n            $('<input>').attr({\n                type: 'hidden',\n                name: `${handler.prefix}-address`,\n                value: data.ip\n            }).appendTo(form);\n\n            $('<input>').attr({\n                type: 'hidden',\n                name: `${handler.prefix}-country`,\n                value: data.country\n            }).appendTo(form);\n\n            $('<input>').attr({\n                type: 'hidden',\n                name: `${handler.prefix}-country-code`,\n                value: data.country_code\n            }).appendTo(form);\n\n            $('<input>').attr({\n                type: 'hidden',\n                name: `${handler.prefix}-region`,\n                value: data.region\n            }).appendTo(form);\n\n            $('<input>').attr({\n                type: 'hidden',\n                name: `${handler.prefix}-city`,\n                value: data.city\n            }).appendTo(form);\n\n            $('<input>').attr({\n                type: 'hidden',\n                name: `${handler.prefix}-timezone`,\n                value: data.timezone\n            }).appendTo(form);\n\n            $('<input>').attr({\n                type: 'hidden',\n                name: `${handler.prefix}-latitude`,\n                value: data.latitude\n            }).appendTo(form);\n\n            $('<input>').attr({\n                type: 'hidden',\n                name: `${handler.prefix}-longitude`,\n                value: data.longitude\n            }).appendTo(form);\n\n        });\n\n    }\n*/\n}\n"],
  "mappings": ";;AAcO,MAAM,oBAAN,MAAwB;AAAA,IAS3B,YAAY,MAAe,QAAQ;AAE/B,WAAK,OAAO;AAEZ,WAAK,UAAU;AAEf,WAAK,SAAS;AAAA,IAElB;AAAA,EAqNJ;",
  "names": []
}
