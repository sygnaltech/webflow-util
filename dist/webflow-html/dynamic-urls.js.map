{
  "version": 3,
  "sources": ["../../src/utils.ts", "../../src/storage-utils.ts", "../../src/webflow-core/debug.ts", "../../src/webflow-html/dynamic-urls.ts"],
  "sourcesContent": ["\n/*\n * webflow-utils\n * \n * Sygnal Technology Group\n * https://www.sygnal.com\n * \n * General Utilities\n */\n\n// https://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n\n// https://www.w3docs.com/snippets/javascript/how-to-convert-string-to-title-case-with-javascript.html\n\n\n\nexport function identifyElement(element: HTMLElement): string {\n    switch (element.tagName) {\n        case 'A': \n            return 'HTMLLinkElement'; \n        case 'INPUT': {\n            const inputElement = element as HTMLInputElement;\n            switch (inputElement.type) {\n\n// BUG: add date types and number types \n\n                case 'checkbox':\n                    return 'HTMLCheckboxElement';\n                case 'radio':\n                    return 'HTMLRadioElement';\n                // case 'text':\n                //     return 'HTMLTextElement';\n                // case 'password':\n                //     return 'HTMLPasswordElement';\n                case 'file':\n                    return 'HTMLFileInputElement';\n                default:\n                    return 'HTMLInputElement';\n            }\n        }\n        case 'SELECT':\n            return 'HTMLSelectElement';\n        case 'TEXTAREA':\n            return 'HTMLTextAreaElement';\n        case 'BUTTON':\n            return 'HTMLButtonElement';\n        default:\n            return 'HTMLElement';\n    }\n}\n\nexport function selectOptionByValue(selectElement: HTMLSelectElement, value: string) {\n    for (let i = 0; i < selectElement.options.length; i++) {\n        if (selectElement.options[i].value === value) {\n            selectElement.options[i].selected = true;\n            break;\n        }\n    }\n}\n\n// Evaluates a string value as boolean \nexport function booleanValue(val: string): boolean {\n    switch (val.toLowerCase()) {\n        case \"false\":\n        case \"f\":\n        case \"\":\n        case \"0\":\n        case \"no\":\n        case \"off\":\n        case undefined: case \"undefined\":\n        case null: case \"null\": \n            return false;\n        default:\n            return true;\n    }\n}\n\nexport function addDays(date: Date, days: number): Date {\n    let result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n}\n\n\nexport function getCookie(name) {\n    var match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));\n    if (match) return match[2];\n}\n\n\n\nexport function toTitleCase(str) {\n\n    return str.toLowerCase().split(' ').map(function (word) {\n        return (word.charAt(0).toUpperCase() + word.slice(1));\n    }).join(' ');\n\n}\n\n// How do you JSON.stringify an ES6 Map?\n// https://stackoverflow.com/a/56150320\nexport function jsonMapReplacer(key, value) {\n\n    if(value instanceof Map) {\n        return {\n            dataType: 'Map',\n            value: Array.from(value.entries()), // or with spread: value: [...value]\n        };\n    } else {\n        return value;\n    }\n}\n\n// How do you JSON.stringify an ES6 Map?\n// https://stackoverflow.com/a/56150320\nexport function jsonMapReviver(key, value) {\n\n    console.log (\"reviving\", key, typeof value, value); \n\n    if (typeof value === 'object' && value !== null) {\n        if (value.dataType === 'Map') {\n            return new Map(value.value);\n        }\n    }\n    return value;    \n}\n\n\n// HTML Decode JSON for Select Option element\n// https://tertiumnon.medium.com/js-how-to-decode-html-entities-8ea807a140e5\n// export function decodeHTML(text) {\n//     return $(\"<textarea/>\")\n//       .html(text)\n//       .text();\n// }\nexport function decodeHTML(text: string): string {\n    let parser = new DOMParser();\n    let dom = parser.parseFromString(\n        `<!doctype html><body>${text}`,\n        'text/html');\n    return dom.body.textContent || '';\n}\n\n// https://tertiumnon.medium.com/js-how-to-decode-html-entities-8ea807a140e5\n// export function encodeHTML(text) {\n//     return $(\"<textarea/>\")\n//       .text(text)\n//       .html();\n// }\nexport function encodeHTML(text) {\n    let div = document.createElement('div');\n    div.appendChild(document.createTextNode(text));\n    return div.innerHTML;\n}\n\n// How to check if a number is between two values?\n// https://stackoverflow.com/a/18881828\n// Number.prototype.between = function (a, b, inclusive) {\n//     var min = Math.min(a, b),\n//         max = Math.max(a, b);\n\n//     return inclusive ? this >= min && this <= max : this > min && this < max;\n// }\nexport function between(value: number, a: number, b: number, inclusive: boolean): boolean {\n    let min = Math.min(a, b);\n    let max = Math.max(a, b);\n\n    return inclusive ? value >= min && value <= max : value > min && value < max;\n}\n\n// Handy outerHTML extension function\n// jQuery.fn.outerHTML = function () {\n//     return jQuery('<div />').append(this.eq(0).clone()).html();\n// };\nexport function outerHTML(element) {\n    return element.outerHTML;\n}\n\n\n// Mobile detection\n// https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\n// window.mobileCheck = function () {\nexport function isMobile() {\n    let check = false;\n    (function (a) { if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true; })(navigator.userAgent || navigator.vendor || window['opera']);\n    return check;\n};\n\n// How to execute a JavaScript function when I have its name as a string\n// https://stackoverflow.com/a/359910\nexport function executeFunctionByName(functionName, context /*, args */) {\n    var args = Array.prototype.slice.call(arguments, 2);\n    var namespaces = functionName.split(\".\");\n    var func = namespaces.pop();\n    for (var i = 0; i < namespaces.length; i++) {\n        context = context[namespaces[i]];\n    }\n    return context[func].apply(context, args);\n}\n\n// How to execute a JavaScript function when I have its name as a string\n// https://stackoverflow.com/a/4351575 \nexport function executeFunctionByName2(functionName, context /*, args */) {\n    var args = Array.prototype.slice.call(arguments, 2);\n    var namespaces = functionName.split(\".\");\n    var func = namespaces.pop();\n    for (var i = 0; i < namespaces.length; i++) {\n        context = context[namespaces[i]];\n    }\n    return context[func].apply(context, args);\n}\n\n//#region Shuffle\n\n// Shuffles a group of elements in the DOM\n// and also returns a set \nexport function shuffleElements(elements: Element[]): Element[] {\n    const allElems = Array.from(elements);\n    const getRandom = (max: number) => Math.floor(Math.random() * max);\n\n    const shuffled = allElems.map(() => {\n        const random = getRandom(allElems.length);\n        const randEl = allElems[random].cloneNode(true) as Element;\n        allElems.splice(random, 1);\n        return randEl;\n    });\n\n    allElems.forEach((elem, i) => {\n        if (elem.parentNode) {\n            elem.parentNode.replaceChild(shuffled[i], elem);\n        }\n    });\n\n    return shuffled;\n}\n\n// Usage:\n// const elements = document.querySelectorAll('.some-class');\n// const shuffledElements = shuffleElements(Array.from(elements));\n\n//#endregion\n\n/* previous code\n\n// Credit James Padolsey \n// https://css-tricks.com/snippets/jquery/shuffle-dom-elements/\n(function($){\n \n    $.fn.shuffle = function() {\n \n        var allElems = this.get(),\n            getRandom = function(max) {\n                return Math.floor(Math.random() * max);\n            },\n            shuffled = $.map(allElems, function(){\n                var random = getRandom(allElems.length),\n                    randEl = $(allElems[random]).clone(true)[0];\n                allElems.splice(random, 1);\n                return randEl;\n           });\n \n        this.each(function(i){\n            $(this).replaceWith($(shuffled[i]));\n        });\n \n        return $(shuffled);\n \n    };\n \n})(jQuery);\n*/\n\n\n//#region IFRAMES\n\nexport function autosizeIFrames(): void {\n    // Identify all IFRAMES with autosize tag\n    const iframes = Array.from(\n        // BUG: weird tagging \n        document.querySelectorAll(\"iframe[wfu='html.iframe.autofit']\")\n        );\n\n    iframes.forEach((iframe: HTMLIFrameElement) => {\n        // Add event listener and wait for content to load\n        iframe.addEventListener('load', () => {\n            setInterval(() => {\n                if (iframe.contentDocument) {\n                    iframe.style.height = `${iframe.contentDocument.body.scrollHeight}px`;\n                }\n            }, 200);\n        });\n    });\n};\n\n/* prev\n\nexport var autosizeIFrames = function () {\n\n    // Identify all IFRAMES with autosize tag\n    let iframes = $(\"iframe[wfu='html.iframe.autofit']\");\n\n    iframes.each(function (index) {\n\n        var iframe = this;\n\n        // Add event listener and wait for content to load\n        this.addEventListener('load', function () {\n            setInterval(function () {\n                iframe.style.height = iframe.contentDocument.body.scrollHeight + 'px';\n            }, 200);\n        });\n\n    });\n\n}\n\n*/\n\n//#endregion\n\n\n//#region Dynamic Attributes\n\n// Applies custom attributes to HTML elements throughout the page\n// from relatively-positioned <data> elements.\n\n\nexport function applyDynamicAttributes(): void {\n\n    // Find all <data> elements which specify a data-source for data binding\n    const dynamicAttributeDatas = Array.from(\n        document.querySelectorAll('data[wfu-attr]')\n        );\n\n    // Iterate and bind each individually\n    dynamicAttributeDatas.forEach((data: HTMLElement) => {\n\n        // Webflow wraps EMBEDS in a DIV, so we work from that parent as a positional reference\n        const dataContainer = data.parentElement;\n\n        // hide this node\n        if (dataContainer) {\n            dataContainer.style.display = 'none';\n        }\n\n        let target: HTMLElement | null = null;\n\n        // Webflow wraps EMBEDS in a DIV[wf-embed], so we work from that parent as a reference\n        switch (data.getAttribute('wfu-attr-target')) {\n            case 'prev':\n                target = dataContainer?.previousElementSibling as HTMLElement;\n                break;\n            case 'next':\n                target = dataContainer?.nextElementSibling as HTMLElement;\n                break;\n            case 'parent':\n                target = dataContainer?.parentElement;\n                break;\n            default:\n                console.warn('Unknown apply setting for param.');\n        }\n\n        // Apply attribute\n        if (target) {\n            target.setAttribute(data.getAttribute('wfu-attr') || '', data.getAttribute('wfu-attr-val') || '');\n        }\n\n    });\n};\n\n\n/*\n\n\nexport var applyDynamicAttributes = function () {\n\n    // Find all <data> elements which specify a data-source\n    // for data binding\n    var dynamicAttributeDatas = $('data[wfu-attr]');\n\n    // Iterate and bind each individually\n    $.each(dynamicAttributeDatas, function (i, elem) {\n\n        var data = this;\n\n        // Webflow wraps EMBEDS in a DIV, so we work from that parent as a positional reference\n        var dataContainer = $(data).parent();\n\n        // hide this node\n        $(dataContainer).attr(\"style\", \"display: none;\");\n\n        var target = null;\n\n        // Webflow wraps EMBEDS in a DIV[wf-embed], so we work from that parent as a reference\n        switch ($(data).attr(\"wfu-attr-target\")) {\n            case \"prev\":\n                target = $(dataContainer).prev();\n                break;\n            case \"next\":\n                target = $(dataContainer).next();\n                break;\n            case \"parent\":\n                target = $(dataContainer).parent();\n                break;\n            default:\n\n                if (vars.logging)\n                    console.warn(\"Unknown apply setting for param.\");\n        }\n\n        // Apply attribute\n        var dataItem = this;\n        $(target).attr(\n            $(dataItem).attr(\"wfu-attr\"),\n            $(dataItem).attr(\"wfu-attr-val\")\n        );\n\n    });\n\n}\n\n*/\n\n//#endregion\n\n\n\n\n//#region Data Formatting\n\nexport const formatJson = (data: any): string | undefined => {\n    let json;\n\n    // Convert JSON to string\n    if (typeof data !== 'string') {\n        json = JSON.stringify(data, undefined, 2);\n    }\n\n    return json;\n}\n\nexport const formatJsonAsHtml = (data: any): string => {\n    // Convert JSON to string\n    let json = formatJson(data);\n\n    json = json?.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n    // Add JSON styling classes\n    return json?.replace(\n        /(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g,\n        (match) => {\n            let cls = 'wfu-json-number';\n            if (/^\"/.test(match)) {\n                if (/:$/.test(match)) {\n                    cls = 'wfu-json-key';\n                } else {\n                    cls = 'wfu-json-string';\n                }\n            } else if (/true|false/.test(match)) {\n                cls = 'wfu-json-boolean';\n            } else if (/null/.test(match)) {\n                cls = 'wfu-json-null';\n            }\n            return `<span class=\"${cls}\">${match}</span>`;\n        }) || '';\n}\n\nexport const displayDataAsHtml = (el: HTMLElement, data: any): void => {\n    // Create <pre> element\n    const pre = document.createElement('pre');\n    pre.className = 'wfu-code';\n\n    // Populate <pre> element with formatted JSON data\n    pre.innerHTML = formatJsonAsHtml(data);\n\n    // Append <pre> element to the target element\n    el.innerHTML = '';\n    el.appendChild(pre);\n}\n\n/*\n\nexport var formatJson = function (data) {\n\n    var json;\n\n    // Convert JSON to string\n    if (typeof data != 'string') {\n        json = JSON.stringify(data, undefined, 2);\n    }\n\n    return json;\n}\n\nexport var formatJsonAsHtml = function (data) {\n\n    // Convert JSON to string\n    var json = formatJson(data);\n\n    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n    // Add JSON styling classes\n    return json.replace(\n        /(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g,\n        function (match) {\n            var cls = 'wfu-json-number';\n            if (/^\"/.test(match)) {\n                if (/:$/.test(match)) {\n                    cls = 'wfu-json-key';\n                } else {\n                    cls = 'wfu-json-string';\n                }\n            } else if (/true|false/.test(match)) {\n                cls = 'wfu-json-boolean';\n            } else if (/null/.test(match)) {\n                cls = 'wfu-json-null';\n            }\n            return '<span class=\"' + cls + '\">' + match + '</span>';\n        });\n\n}\n\nexport var displayDataAsHtml = function (el, data) {\n\n//    var json = formatJson(data);\n\n    // Create <pre> element\n    $(el).html(\"<pre class='wfu-code'></pre>\");\n\n    // Populate <pre> element with formatted JSON data\n    $(el).children(\"pre\").html(\n        formatJsonAsHtml(data)\n    );\n\n}\n\n*/\n\n//#endregion \n\n\n\n//#region Macros\n\n/* expandMacrosInElement\n * Expands {{ var }} constructs in an elements innerHtml\n * using dictionary lookup, and replaces the element content.\n */\n\nexport function expandMacrosInElement (el: HTMLElement, dict: Map<string, string>): void {\n    let html = el.innerHTML;\n\n    html = expandMacrosInText(html, dict);\n\n    el.innerHTML = html;\n}\n\n/* expandMacrosInText\n * Expands {{ var }} constructs in text\n */\n\nexport const expandMacrosInText = (text: string, dict: Map<string, string>): string => {\n    // Must be positioned before regex replace call\n    const replacer = (match: string, p1: string, p2: string, p3: string, offset: number, string: string): string => {\n        return dict.get(p2) || '';\n    }\n\n    text = text.replace(\n        /{\\s*(?<cmd>\\w*)\\s*\\{\\s*(?<params>\\w*)\\s*\\}\\s*(?<options>\\w*)\\s*\\}/g,\n        replacer\n    );\n\n    return text;\n}\n\n\n\n/*\n\nexport var expandMacrosInElement = function (el, dict) {\n\n    var html = $(el).html();\n\n    html = expandMacrosInText(html, dict);\n\n    $(el).html(\n        html\n    );\n\n}\n\n\nexport var expandMacrosInText = function (text, dict) {\n\n\n\n    // https://regexr.com/\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_string_as_a_parameter\n    // Must be positioned before regex replace call\n    var replacer = function (match, p1, p2, p3, offset, string) {\n\n        return dict.get(p2);\n    }\n\n    text = text.replace(\n        /{\\s*(?<cmd>\\w*)\\s*\\{\\s*(?<params>\\w*)\\s*\\}\\s*(?<options>\\w*)\\s*\\}/g,\n        replacer\n    );\n\n    return text;\n}\n\n*/\n\n\n//#endregion\n\n/**\n * Sequence a group of items\n * @param groupElement \n */\n\nexport function sequence (groupElement: HTMLElement): void {\n \n    // Get the group name\n    const groupName = groupElement.getAttribute(\"wfu-seq-group\");\n    console.log(\"sequence group\", groupName)\n\n    // Find matching items \n    let i = 0;\n    const elements = groupElement.querySelectorAll(`[wfu-seq=\"${groupName}\"]`);\n    elements.forEach((element: Element) => {\n        element.innerHTML = (++i).toString();\n    }); \n}\n\n\n/*\n\nexport var sequence = function (l) {\n\n    const $group = $(l);\n    \n    // Get the group name\n    const groupName = $group.attr(\"wfu-seq-group\");\n\n    // Find matching items \n    var i = 0;\n    $group.find(`[wfu-seq=\"${groupName}\"]`).each(function() {\n        $(this).html(++i);\n    }); \n\n}\n\n*/\n\n\n/**\n * Shuffle array randomly\n * Fisher-Yates (also known as Knuth) shuffle \n * iterates over the array from the last element to the first, randomly choosing an element in the unshuffled portion of the array and swapping it with the current element. This provides a uniform distribution of array permutations.\n * @param array \n * @returns \n */\n\nexport function shuffleArray(array: any[]) {\n\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n\n    return array;\n}\n\n\n\n", "\n/*\n * SA5\n * \n * Sygnal Technology Group\n * https://www.sygnal.com\n * \n * Storage Utilities\n */\n\n\n\nexport class StorageUtils { \n\n    static get localStorageAvailable(): boolean {\n        try {\n            const test = \"__test__\";\n            localStorage.setItem(test, test);\n            localStorage.removeItem(test);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    static get sessionStorageAvailable(): boolean {\n        try {\n            const test = \"__test__\";\n            sessionStorage.setItem(test, test);\n            sessionStorage.removeItem(test);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    static get cookiesAvailable(): boolean {\n        try {\n            const test = \"__test__=1\";\n            document.cookie = test + \"; path=/\";\n            const cookies = document.cookie;\n            const available = cookies.includes(\"__test__=1\");\n            document.cookie = \"__test__=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n            return available;\n        } catch {\n            return false;\n        }\n    }\n\n}\n\n\n", "\n/*\n * webflow-core\n * \n * Sygnal Technology Group\n * https://www.sygnal.com\n * \n * Debug Utilities\n */\n\nimport { VERSION } from \"../version\";\nimport { StorageUtils } from \"../storage-utils\";\n\n\n\n\nexport class Sa5Debug {\n    \n    private localStorageDebugFlag: string = 'sa5-debug';\n\n    private _enabled: boolean = false;\n    private _label: string;\n\n    // Get or set WFU persistent debug state\n    // which is stored in localStorage. \n    get persistentDebug(): boolean {\n        return StorageUtils.localStorageAvailable\n            ? Boolean(localStorage.getItem(this.localStorageDebugFlag))\n            : false;\n    }\n    set persistentDebug(active: boolean) {\n        if (!StorageUtils.localStorageAvailable) return;\n\n        if (active) {\n            localStorage.setItem(this.localStorageDebugFlag, \"true\");\n            console.debug (`sa5-core debug enabled (persistent).`);\n        } else {\n            localStorage.removeItem(this.localStorageDebugFlag); \n            console.debug (`sa5-core debug disabled (persistent).`);\n        }\n    }\n\n    // Enable/disable debugging \n    get enabled(): boolean {\n\n        if (!StorageUtils.localStorageAvailable) return false;\n\n        // localStorage is checked for a debug flag, to enable remote debug enabling \n        // Any non-null string value will resolve to TRUE here, including the string \"false\" \n        var wfuDebugValue = Boolean(localStorage.getItem(this.localStorageDebugFlag)); \n\n        // Or this with the current debug state\n        // If either is enabled, debugging is on \n        wfuDebugValue = wfuDebugValue || this._enabled; \n\n        return wfuDebugValue;\n    }\n    set enabled(active: boolean) {\n        this._enabled = active;\n    }\n\n\n    // Initialize\n    constructor(label: string) {\n\n        // Save the label, for console logging\n        this._label = label;\n\n    }\n\n\n    // Start a console log group\n    group(name) {\n        if (this.enabled)\n            console.group(name);\n    }\n\n    // End a console log group\n    groupEnd() {\n        if (this.enabled)\n            console.groupEnd();\n    }\n\n    // Log debug data to the console\n    debug2(...args: any[]): void {\n\n        if (this.enabled)\n            // Unlimited arguments in a JavaScript function\n            // https://stackoverflow.com/a/6396066\n            // console.debug(this._label, ...args); \n            console.debug.apply(console, [this._label, ...args]);\n    }\n    \n    debug(...args: any[]): void {\n        if (this.enabled) {\n            let formattedMessage = \"\";\n            let styles: string[] = [];\n    \n            for (let i = 0; i < args.length; i++) {\n                if (typeof args[i] === \"string\" && args[i].includes(\"%c\") && typeof args[i + 1] === \"string\") {\n                    // Append styled text and store the corresponding style\n                    formattedMessage += args[i] + \" \";\n                    styles.push(args[i + 1]);\n                    i++; // Skip the next item (style string)\n                } else {\n                    formattedMessage += \"%c\" + args[i] + \" \";\n                    styles.push(\"\"); // Ensure there is a corresponding style\n                }\n            }\n    \n            // Apply the formatted message and styles correctly\n            console.debug(formattedMessage.trim(), ...styles);\n        }\n    }\n    \n    /**\n     * Returns the HTML style string\n     * @param elem The element to return the string for \n     * @returns \n     */\n    static getStyleString(elem: HTMLElement): string {\n\n        let styleString = '';\n    \n        for (let i = 0; i < elem.style.length; i++) {\n            const property = elem.style[i];\n            const value = elem.style.getPropertyValue(property);\n            styleString += `${property}: ${value}; `;\n        }\n    \n        return styleString; \n    }\n\n}\n\n\n", "\n\n/*\n * webflow-html\n * Dynamic URLs \n * \n * Sygnal Technology Group\n * https://www.sygnal.com\n * \n * Applies all xq: prefixed attributes to their elements without the prefix.\n * Best paired with the new CMS & component property databinding feature of Webflow's custom attributes. \n */\n\n\nimport { booleanValue } from '../utils';\nimport { Sa5Debug } from '../webflow-core/debug';\n\n\n\ninterface Config {\n}\n\ninterface DynamicUrlConfig {\n    name: string;\n    value?: string;\n    pre?: string;\n    post?: string;\n    target: string; // Always defined, defaults to \"parent\" if missing\n}\n\n\n\nexport class Sa5HtmlDynamicUrls {\n    config: Config;\n\n    constructor(config: Config) {\n        this.config = config;\n    }\n\n    init() {\n\n        // Initialize debugging\n        let debug = new Sa5Debug(\"sa5-html\");\n        debug.debug (\"Dynamic URLs initialized.\", this.config);\n\n\n\n        // // Select all elements in the document\n        // var allElements = document.querySelectorAll<HTMLElement>('*');\n\n        // // Iterate over all elements\n        // allElements.forEach(element => {\n        //     // Iterate over all attributes of each element\n        //     Array.from(element.attributes).forEach(attr => {\n        //     // Check if attribute name starts with 'x-'\n        //     if (attr.name.startsWith('x-') || attr.name.startsWith('x:')) {\n        //         // Create a new attribute name by removing 'x-'\n        //         const newAttrName = attr.name.slice(2);\n    \n        //         this.applyAttr(element, newAttrName, attr.value); \n\n        //         // Optional: log the new attribute for debugging\n        //         debug.debug(`Element: ${element.tagName}, New Attribute: ${newAttrName}, Value: ${attr.value}`);\n        //     }\n        //     });\n        // });\n\n        // Legacy transforms\n        // x-* \n\n        document.querySelectorAll<HTMLElement>('*').forEach(el => {\n            Array.from(el.attributes).forEach(attr => {\n                if (attr.name.startsWith('x-')) {\n        \n                    // Create a new attribute name by removing 'x-'\n                    const newAttrName = attr.name.slice(2);\n            \n                    this.applyAttr(el, newAttrName, attr.value); \n\n                    // Optional: log the new attribute for debugging\n                    debug.debug(`Element: ${el.tagName}, New Attribute: ${newAttrName}, Value: ${attr.value}`);\n\n                }\n            });\n        });        \n\n        // Transforms\n        // xq:*\n        // xq:*:pre\n        // xq:*:post\n\n        document.querySelectorAll<HTMLElement>('*').forEach(el => {\n            Array.from(el.attributes).forEach(attr => {\n                if (attr.name.startsWith('x:')) {\n        \n                    // If the attribute does not still exist on this element, continue\n                    if (!el.hasAttribute(attr.name)) return;\n        \n                    // Get the base attribute name, without the x: or any :pre or :post suffix\n                    const baseAttr = attr.name.split(':')[1]; \n                    const mainAttr = `x:${baseAttr}`; \n                    const preAttr = `x:${baseAttr}:pre`;\n                    const postAttr = `x:${baseAttr}:post`;\n        \n                    // Retrieve the 4 values - attr, x:attr, x:attr:pre, x:attr:post\n                    const existingValue = el.getAttribute(baseAttr) || \"\"; // Existing value (if exists)\n                    const mainValue = el.getAttribute(mainAttr) !== null ? el.getAttribute(mainAttr) : existingValue;\n                    const preValue = el.getAttribute(preAttr) || \"\";  // Prefix (if exists)\n                    const postValue = el.getAttribute(postAttr) || \"\"; // Suffix (if exists)\n        \n                    // Assemble the resulting value\n                    const finalValue = preValue + mainValue + postValue;\n        \n                    // Apply the resulting value\n                    el.setAttribute(baseAttr, finalValue);\n                    this.applyAttr(el, baseAttr, finalValue); \n        \n\n                    // Remove the three x: attributes\n                    el.removeAttribute(mainAttr); // Remove x:something (if exists)\n                    el.removeAttribute(preAttr);   // Remove x:something:pre (if exists)\n                    el.removeAttribute(postAttr);  // Remove x:something:post (if exists)\n                }\n            });\n        });\n\n        // Handle scripts \n\n        const scripts = document.querySelectorAll<HTMLScriptElement>(\n            'script[type=\"application/sa5+json\"][handler=\"DynamicAttribute\"]'\n        );\n    \n        const configs: DynamicUrlConfig[] = [];\n    \n        scripts.forEach((script) => {\n            try {\n                if (!script.textContent) return; // Skip empty script blocks\n        \n                const parsed = JSON.parse(script.textContent);\n        \n                // Validate structure\n                if (parsed[\"@type\"] === \"DynamicAttribute\" && typeof parsed.name === \"string\") {\n                    const config: DynamicUrlConfig = {\n                        name: parsed.name,\n                        value: typeof parsed.value === \"string\" ? parsed.value : undefined,\n                        pre: typeof parsed.pre === \"string\" ? parsed.pre : undefined,\n                        post: typeof parsed.post === \"string\" ? parsed.post : undefined,\n                        target: typeof parsed.target === \"string\" ? parsed.target.toLowerCase() : \"parent\",\n                    };\n\n                    let targetElement: Element | null = null;\n                    targetElement = this.getElem(script, config.target); \n\n                    // If target element is found, retrieve the attribute value\n                    if (targetElement) { \n\n                        const existingValue = targetElement.getAttribute(config.name); \n                        const mainValue = config.value !== null ? config.value : existingValue;\n                        const preValue = config.pre || \"\";  // Prefix (if exists)\n                        const postValue = config.post || \"\"; // Suffix (if exists)\n            \n// console.log(existingValue, mainValue, preValue, postValue)\n\n                        // Assemble the resulting value\n                        const finalValue = preValue + mainValue + postValue;\n\n                        targetElement.setAttribute(config.name, finalValue); \n\n//                         console.log(`Attribute \"${name}\" value:`, finalValue);\n                    } else {\n                        console.warn(`No target element found for target \"${config.target}\".`);\n                    }\n\n                    configs.push(config);\n                }\n            } catch (error) {\n                console.warn(\"Invalid JSON in DynamicAttribute script block:\", script, error);\n            }\n        });  \n      \n\n//         // Iterate over all elements\n//         allElements.forEach(element => {\n\n//             // Iterate over all attributes of each element\n//             for (var i = 0; i < element.attributes.length; i++) {\n//                 var attr = element.attributes[i]; \n\n//                 // Check if attribute name starts with 'x-'\n//                 if (attr.name.startsWith('x-')) {\n//                     // Do something with the element or attribute\n\n//                     var newAttrName = attr.name.slice(2);\n//                     // Set the new attribute on the element with the same value as the old attribute\n//                     element.setAttribute(newAttrName, attr.value);\n\n//                     // Special element handling\n// //                    switch(element.typ)\n\n// //                    console.log('Element:', element, 'Attribute:', attr.name, 'Value:', attr.value);\n//                 }\n//             }\n\n//         });\n\n    }\n\n    getElem(element: HTMLElement, target: string) {\n\n        // Identify the target element\n        let targetElement: Element | null = null;\n        switch (target) {\n            case \"parent\":\n                targetElement = element.parentElement.parentElement;\n                break;\n            case \"prev\":\n                targetElement = element.parentElement.previousElementSibling;\n                break;\n            case \"next\":\n                targetElement = element.parentElement.nextElementSibling;\n                break;\n        }\n\n        return targetElement; \n    }\n\n\n    // combineAttr() {\n    //     const existingValue = el.getAttribute(baseAttr) || \"\"; // Existing value (if exists)\n    //     const mainValue = el.getAttribute(mainAttr) !== null ? el.getAttribute(mainAttr) : existingValue;\n    //     const preValue = el.getAttribute(preAttr) || \"\";  // Prefix (if exists)\n    //     const postValue = el.getAttribute(postAttr) || \"\"; // Suffix (if exists)\n    // }\n\n\n    applyAttr(element: HTMLElement, newAttrName: string, newAttrValue: string) {\n\n        // Set the new attribute on the element with the same value as the old attribute\n        element.setAttribute(newAttrName, newAttrValue);  \n\n        // Special case: if element is a textarea and newAttrName is \"input\"\n        switch(element.tagName.toLowerCase()) {\n            case \"textarea\":\n                if (newAttrName === 'value') \n                    (element as HTMLTextAreaElement).value = newAttrValue;\n                break;\n            case \"select\":\n                if (newAttrName === 'value') \n                    (element as HTMLSelectElement).value = newAttrValue;\n                break;\n            case \"input\":\n                switch (element.getAttribute(\"type\")) {   \n\n                    // Special checkbox processing \n                    case \"checkbox\":\n\n                        // Process checked specially as boolean\n                        if(newAttrName == \"checked\") {\n                            if(booleanValue(newAttrValue))\n                                element.setAttribute(\"checked\", \"checked\");\n                            else\n                                element.removeAttribute(\"checked\");\n                        } \n                        break;\n                }\n                break;\n        }\n\n    }\n\n/*\n\n    applyAttr(element: HTMLElement, newAttrName: string, newAttrValue: string) {\n\n        // Set the new attribute on the element with the same value as the old attribute\n        element.setAttribute(newAttrName, attr.value);  \n\n        // Special case: if element is a textarea and newAttrName is \"input\"\n        switch(element.tagName.toLowerCase()) {\n            case \"textarea\":\n                if (newAttrName === 'value') \n                    (element as HTMLTextAreaElement).value = attr.value;\n                break;\n            case \"select\":\n                if (newAttrName === 'value') \n                    (element as HTMLSelectElement).value = attr.value;\n                break;\n            case \"input\":\n                switch (element.getAttribute(\"type\")) {   \n\n                    // Special checkbox processing \n                    case \"checkbox\":\n\n                        // Process checked specially as boolean\n                        if(newAttrName == \"checked\") {\n                            if(booleanValue(attr.value))\n                                element.setAttribute(\"checked\", \"checked\");\n                            else\n                                element.removeAttribute(\"checked\");\n                        } \n                        break;\n                }\n                break;\n        }\n\n*/\n\n\n}\n  \n// Register\n// window[\"sa5\"] = window[\"sa5\"] || []; // {};\n// window[\"sa5\"][\"Sa5HtmlDynamicAttributes\"] = Sa5HtmlDynamicAttributes;\n\n\n"],
  "mappings": "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",
  "names": []
}
