{
  "version": 3,
  "sources": ["../../src/webflow-core/webflow-editor.ts"],
  "sourcesContent": ["\n/*\n * webflow-core\n * \n * Sygnal Technology Group\n * https://www.sygnal.com\n * \n * Editor Utilities\n */\n\n\n\n\n/*\n * Sa5Editor\n *\n * Sygnal Technology Group\n * https://www.sygnal.com\n *\n * Detects the current editor mode.\n */\n\nexport class Sa5Editor {\n\n    config; // Optional config\n\n    get isEditorMode() {\n\n// TODO: check\n// Title\n// vs webflow.require(\"editor\")\n// vs [data-wf-mode]  \n\n        return document.documentElement\n            .getAttribute(\"data-wf-mode\") === \"editor\";\n\n//        return $(\"html\").attr(\"data-wf-mode\") == \"editor\";\n\n    }\n\n    detectEditorMode() {\n\n        // HACK: Use the <title> to detect Editor mode status\n        if (document.title.startsWith(\"Editor:\")) {\n            console.debug(\"Editor mode\");\n            document.documentElement.setAttribute(\"data-wf-mode\", \"editor\");\n        } else {\n            console.debug(\"NOT Editor mode\");\n            document.documentElement.removeAttribute(\"data-wf-mode\");\n        }\n\n        // // HACK: Use the <title> to detect Editor mode status\n        // if ($(\"title\").text().startsWith(\"Editor:\")) {\n        //     console.debug(\"Editor mode\");\n        //     $(\"html\").attr(\"data-wf-mode\", \"editor\");\n        // } else {\n        //     console.debug(\"NOT Editor mode\");\n        //     $(\"html\").removeAttr(\"data-wf-mode\");\n        // }\n\n    }\n\n    constructor(config = null) {\n        config = config || {};\n\n        this.config = config;\n\n        this.init();\n\n//        console.debug(`WFU Edit mode monitor installed`);\n\n    }\n\n    // Install Editor mode detector\n    init() {\n\n        // Assuming `this` is of a class type that has a `detectEditorMode` method\n        let titleElement = document.getElementsByTagName(\"title\")[0];\n\n        // Create a new MutationObserver instance\n        let observer = new MutationObserver((mutations) => {\n            this.detectEditorMode();\n        });\n\n        // Start observing the target node for configured mutations\n        observer.observe(titleElement, { childList: true });\n\n        // var _this = this;\n        // this.observeDOM($(\"title\")[0], function (m) {\n\n        //     _this.detectEditorMode();\n        // });\n    }\n\n    // Installs a mutation observer \n\n//    type Callback = (mutationsList: MutationRecord[], observer: MutationObserver) => void;\n\n//observeDOM\n// mutations() {\n\n//     const MutationObserver = window.MutationObserver || window['WebKitMutationObserver'];\n\n//     return function (obj: Node, callback: Callback): MutationObserver | undefined {\n//         if (!obj || obj.nodeType !== Node.ELEMENT_NODE) return;\n\n//         if (MutationObserver) {\n//             // define a new observer\n//             const mutationObserver = new MutationObserver(callback);\n\n//             // have the observer observe foo for changes in children\n//             mutationObserver.observe(obj, { childList: true, subtree: true });\n//             return mutationObserver;\n//         }\n\n//         // browser support fallback\n//         else if (window.addEventListener) {\n//             obj.addEventListener('DOMNodeInserted', callback as EventListener, false);\n//             obj.addEventListener('DOMNodeRemoved', callback as EventListener, false);\n//         }\n//     };\n// }\n\n/*\n\n    observeDOM = (function () {\n    var MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\n    return function (obj, callback) {\n        if (!obj || obj.nodeType !== 1) return;\n\n        if (MutationObserver) {\n            // define a new observer\n            var mutationObserver = new MutationObserver(callback)\n\n            // have the observer observe foo for changes in children\n            mutationObserver.observe(obj, { childList: true, subtree: true })\n            return mutationObserver\n        }\n\n        // browser support fallback\n        else if (window.addEventListener) {\n            obj.addEventListener('DOMNodeInserted', callback, false)\n            obj.addEventListener('DOMNodeRemoved', callback, false)\n        }\n    }\n    })();\n\n*/\n\n}\n\n\n\n"],
  "mappings": ";;AAsBO,MAAM,YAAN,MAAgB;AAAA,IAInB,IAAI,eAAe;AAOf,aAAO,SAAS,gBACX,aAAa,cAAc,MAAM;AAAA,IAI1C;AAAA,IAEA,mBAAmB;AAGf,UAAI,SAAS,MAAM,WAAW,SAAS,GAAG;AACtC,gBAAQ,MAAM,aAAa;AAC3B,iBAAS,gBAAgB,aAAa,gBAAgB,QAAQ;AAAA,MAClE,OAAO;AACH,gBAAQ,MAAM,iBAAiB;AAC/B,iBAAS,gBAAgB,gBAAgB,cAAc;AAAA,MAC3D;AAAA,IAWJ;AAAA,IAEA,YAAY,SAAS,MAAM;AACvB,eAAS,UAAU,CAAC;AAEpB,WAAK,SAAS;AAEd,WAAK,KAAK;AAAA,IAId;AAAA,IAGA,OAAO;AAGH,UAAI,eAAe,SAAS,qBAAqB,OAAO,EAAE;AAG1D,UAAI,WAAW,IAAI,iBAAiB,CAAC,cAAc;AAC/C,aAAK,iBAAiB;AAAA,MAC1B,CAAC;AAGD,eAAS,QAAQ,cAAc,EAAE,WAAW,KAAK,CAAC;AAAA,IAOtD;AAAA,EA0DJ;",
  "names": []
}
